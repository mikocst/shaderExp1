---

---

<div id="three-container"></div>

<style>
  #three-container {
    width: 100dvw;
    height: 100dvh; /* Full viewport height */
    display: block;
    position:absolute;
    z-index: -1;
  }
</style>

<script>
    import * as THREE from 'three';
    import { imageConfig } from "astro:assets";
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
    import vertexShader from '../shaders/vertex.glsl';
    import fragmentShader from '../shaders/fragment.glsl';
    
    const textureLoader = new THREE.TextureLoader();
    const marbleText = '../images/marble.jpg';
    const texture = textureLoader.load(marbleText, (texture) => {
    texture.minFilter = THREE.NearestFilter;
  }) 
  console.log(texture)
   


    document.addEventListener('DOMContentLoaded', () => {
        const container = document.getElementById('three-container')

        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({
            alpha: true
        })

        renderer.setSize(container.clientWidth, container.clientHeight);
        container.appendChild(renderer.domElement);

        //initialize sphere after DOM Content is loaded
        const sphereGeo = new THREE.SphereGeometry(7,32,16);
        const material = new THREE.ShaderMaterial({
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            uniforms: {
                uTime: { value: 0},
                uRadius: {value: 2},
                uTexture:{value:texture},
            }
        });

        //adding sphere to scene
        const sphere = new THREE.Mesh(sphereGeo, material);
        scene.add(sphere);

        const controls = new OrbitControls(camera, renderer.domElement);

        //position camera
        camera.position.z = 20;

        //uniform
        let clock = new THREE.Clock()
        material.uniforms.uTime.value = clock.getElapsedTime();

        //animate
        const animate = function() {
            requestAnimationFrame(animate);

            //updating uniform time to allow the shaders to play
            material.uniforms.uTime.value += 0.06;

            //sample animation
            //sphere.rotation.x += 0.002;

            //updating orbit controls
            controls.update();

            renderer.render(scene, camera);
        }

        animate();

        window.addEventListener('resize', () => {
            camera.aspect = container.clientWidth / container.clientHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(container.clientWidth, container.clientHeight);
        })
    })

</script>